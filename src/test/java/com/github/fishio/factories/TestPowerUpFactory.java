package com.github.fishio.factories;

import java.util.Random;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import com.github.fishio.ICollisionArea;
import com.github.fishio.PlayingField;
import com.github.fishio.SinglePlayerPlayingField;
import com.github.fishio.game.GameThread;
import com.github.fishio.gui.SlimGuiTest;
import com.github.fishio.power_ups.PowerUp;
import com.github.fishio.power_ups.ExtraLifePowerUp;
import com.github.fishio.power_ups.FreezePowerUp;
import com.github.fishio.power_ups.SuperSpeedPowerUp;
import com.github.fishio.settings.Settings;

/**
 * Tests the PowerUpSpawer class.
 */
public class TestPowerUpFactory extends SlimGuiTest {

	private PowerUpFactory puf;
	
	private PlayingField pf;
	
	private Random rand;
	
	/**
	 * Sets the PowerUpSpawner attribute in this class
	 * before every test.
	 */
	@Before
	public void setUp() {
		this.pf = Mockito.mock(SinglePlayerPlayingField.class);
		
		when(pf.getGameThread()).thenReturn(new GameThread(pf)); //Preventing nullPointerExceptions from the gameThread
		when(pf.getFPS()).thenReturn(60); //Making sure our PowerUpSpawner doesn't think the FPS is 0.
		when(pf.getWidth()).thenReturn(100.0); //Same as above
		
		this.puf = Mockito.spy(new PowerUpFactory(pf));
		
		this.rand = Mockito.mock(Random.class);
		this.puf.setRandom(rand);
	}
	
	/**
	 * Tests the first case in the switch statement of the
	 * getRandomPowerUp method.
	 */
	@Test
	public void testGetRandomPowerUp1() {
		when(rand.nextInt(Mockito.anyInt())).thenReturn(0);
		
		PowerUp pu = puf.getRandomPowerUp();
		assertTrue(pu instanceof FreezePowerUp);
	}
	
	/**
	 * Tests the second case in the switch statement of the
	 * getRandomPowerUp method.
	 */
	@Test
	public void testGetRandomPowerUp2() {
		when(rand.nextInt(Mockito.anyInt())).thenReturn(1);
		
		PowerUp pu = puf.getRandomPowerUp();
		assertTrue(pu instanceof SuperSpeedPowerUp);
	}
	
	/**
	 * Tests the third case in the switch statement of the
	 * getRandomPowerUp method.
	 */
	@Test
	public void testGetRandomPowerUp3() {
		when(rand.nextInt(Mockito.anyInt())).thenReturn(2);
		
		PowerUp pu = puf.getRandomPowerUp();
		assertTrue(pu instanceof ExtraLifePowerUp);
	}
	
	/**
	 * Tests to make sure the PowerUps generated by the
	 * getRandomPowerUp method have a correct location.
	 */
	@Test
	public void testGetRandomPowerUpLocation() {
		when(rand.nextInt((int) (Settings.getInstance().getDouble("SCREEN_WIDTH") - 1))).thenReturn(51);
		
		//Checking for each different PowerUp whether it has the correct location.
		int cases = PowerUpFactory.POWERUP_COUNT - 1;
		for (int i = 0; i < PowerUpFactory.POWERUP_COUNT; i++) {
			when(rand.nextInt(cases)).thenReturn(i);
			
			ICollisionArea ca = puf.getRandomPowerUp().getBoundingArea();
			assertEquals(PowerUpFactory.POWERUP_WIDTH, ca.getWidth(), 0.0D);
			assertEquals(PowerUpFactory.POWERUP_HEIGHT, ca.getHeight(), 0.0D);
			assertEquals(51, ca.getCenterX(), 0.0D);
			assertEquals(-PowerUpFactory.POWERUP_HEIGHT, ca.getCenterY(), 0.0D);
		}
	}
}
